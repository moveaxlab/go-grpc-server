// Code generated by mockery v2.42.0. DO NOT EDIT.

package internal

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTestServiceServer is an autogenerated mock type for the TestServiceServer type
type MockTestServiceServer struct {
	mock.Mock
}

type MockTestServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTestServiceServer) EXPECT() *MockTestServiceServer_Expecter {
	return &MockTestServiceServer_Expecter{mock: &_m.Mock}
}

// Endpoint provides a mock function with given fields: _a0, _a1
func (_m *MockTestServiceServer) Endpoint(_a0 context.Context, _a1 *Input) (*Output, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Endpoint")
	}

	var r0 *Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Input) (*Output, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Input) *Output); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Input) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTestServiceServer_Endpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Endpoint'
type MockTestServiceServer_Endpoint_Call struct {
	*mock.Call
}

// Endpoint is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *Input
func (_e *MockTestServiceServer_Expecter) Endpoint(_a0 interface{}, _a1 interface{}) *MockTestServiceServer_Endpoint_Call {
	return &MockTestServiceServer_Endpoint_Call{Call: _e.mock.On("Endpoint", _a0, _a1)}
}

func (_c *MockTestServiceServer_Endpoint_Call) Run(run func(_a0 context.Context, _a1 *Input)) *MockTestServiceServer_Endpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Input))
	})
	return _c
}

func (_c *MockTestServiceServer_Endpoint_Call) Return(_a0 *Output, _a1 error) *MockTestServiceServer_Endpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTestServiceServer_Endpoint_Call) RunAndReturn(run func(context.Context, *Input) (*Output, error)) *MockTestServiceServer_Endpoint_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedTestServiceServer provides a mock function with given fields:
func (_m *MockTestServiceServer) mustEmbedUnimplementedTestServiceServer() {
	_m.Called()
}

// MockTestServiceServer_mustEmbedUnimplementedTestServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedTestServiceServer'
type MockTestServiceServer_mustEmbedUnimplementedTestServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedTestServiceServer is a helper method to define mock.On call
func (_e *MockTestServiceServer_Expecter) mustEmbedUnimplementedTestServiceServer() *MockTestServiceServer_mustEmbedUnimplementedTestServiceServer_Call {
	return &MockTestServiceServer_mustEmbedUnimplementedTestServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedTestServiceServer")}
}

func (_c *MockTestServiceServer_mustEmbedUnimplementedTestServiceServer_Call) Run(run func()) *MockTestServiceServer_mustEmbedUnimplementedTestServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTestServiceServer_mustEmbedUnimplementedTestServiceServer_Call) Return() *MockTestServiceServer_mustEmbedUnimplementedTestServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTestServiceServer_mustEmbedUnimplementedTestServiceServer_Call) RunAndReturn(run func()) *MockTestServiceServer_mustEmbedUnimplementedTestServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTestServiceServer creates a new instance of MockTestServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTestServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTestServiceServer {
	mock := &MockTestServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
